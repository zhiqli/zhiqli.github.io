<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Weeklies on 广阔天地大有作为</title>
    <link>https://zhiqli.github.io/weekly/</link>
    <description>Recent content in Weeklies on 广阔天地大有作为</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>© Copyright zhiqli</copyright>
    <lastBuildDate>Sun, 10 Mar 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://zhiqli.github.io/weekly/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>2024-03-10 第十周：搞定系统设计</title>
      <link>https://zhiqli.github.io/weekly/2024-03-10-w10/</link>
      <pubDate>Sun, 10 Mar 2024 00:00:00 +0000</pubDate>
      <guid>https://zhiqli.github.io/weekly/2024-03-10-w10/</guid>
      <description>流水账 第一次遇到如此凶猛的回南天，在门窗紧闭的情况下，靠南的房间墙和天花板还是滴水了，被子枕头都湿了。还好周三晚上开始转北风，但周末又开始下雨。后面也许还有回南天，下次得记得先把空调打开。 开始学 eBPF 了，看了几天资料，找出老电脑装了一个ubutun来练手，但周末几乎没时间折腾。 看了电影 《周处除三害》，既有视觉血浆爽片的观感也有过度解读的深意。在流量，烂片的时代难得的好电影。 韶音耳机坏了，淘宝找到一家附近的维修店花了200修好了。说起来这个耳机也用五年了。 忙里偷闲踢了一次球，终于进了两个球，还有助攻，好爽。 阅读 《搞定系统设计：面试敲开大厂的门》 看过原版，再次看中文版说实话感觉内容比较乏味，说白了就是八股文。可以提供一个基本的思路和方法论，真正要做相关的系统设计还是要复杂得多。 一点想法 前面说 《搞定系统设计：面试敲开大厂的门》 乏味，是实话，不过书中第二章第三章也可以给面试和平时工作思考提供一些方法论的。诸如系统设计问题的回答套路，一些指标值的快速估算思路。学到一个概念 Back-of-the-Envelope Estimation ，是 Jeff Dean 提出来的概念，意思是“你想象中的实验和常见性能指标数据结合而得出的一些估算值，这些值使你对何种设计可以满足系统需求有初步的概念。” 翻译成“封底估算” 有点奇怪的感觉，实质上是指粗略估计，寓意是随便找一张废纸（如信封底）来计算即可。 相关性的数据 2 的幂 通过这种估算可以快速换算成我们熟悉存储单位。&#xA;2的幂 近似值 缩写 $2^{10}$ 1000 1 KB $2^{20}$ 1,000,000 1 MB $2^{30}$ 1,000,000,000 1 GB $2^{40}$ 1,000,000,000,000 1 TB $2^{50}$ 1,000,000,000,000,000 1 PB 每个程序员该知道的操作耗时 操作名称 耗时 查询 L1 缓存 0.5 ns 分支预测错误 5 ns 查询 L2 缓存 7 ns 互斥锁定 / 解锁 100 ns 查询内存 100 ns 用 Zippy 压缩 1 KB 数据 10,000 ns = 10 us 通过带宽为1 GB / s 的网络发送 2 KB 数据 20,000 ns = 20 us 从内存中顺序读取 1 MB 数据 250,000 ns = 250 us 数据在同一个数据中心往返一次 500,000 ns = 500 us 在硬盘中查找数据 10,000,000 ns = 10 ms 从网络中顺序读取 1 MB 数据 10,000,000 ns = 10 ms 从硬盘中顺序读取 1 MB 数据 30,000,000 ns = 30 ms 将数据包从加州发送至荷兰，再从荷兰返回加州 150,000,000 ns = 150 ms 可用性相关的数字 这个数据其实也不用记，可以直接计算，比如 4 个 9 每年不可用时间。 365 * 24 * 60 * (100 - 99.</description>
    </item>
    <item>
      <title>2024-03-03 第九周：把手弄脏</title>
      <link>https://zhiqli.github.io/weekly/2024-03-03-w9/</link>
      <pubDate>Sun, 03 Mar 2024 00:00:00 +0000</pubDate>
      <guid>https://zhiqli.github.io/weekly/2024-03-03-w9/</guid>
      <description>生活流水账 自从不怎么管大娃学习，换成我带小娃，确实轻松了不少，和两个娃的亲子关系也变好了。 房市大幅度回暖，身边的人又开始讨论房子了？ 又降温了，好冷啊。但下周又回南天，还不如冷一点呢。 最近踢球状态很差，天气回暖，每次五六个队大家玩得认真压迫感很强，越是怕丢球就越丢球，唉，得好好调整。年纪大了护具也不能偷懒，也就一次没带护膝，膝盖已经开始疼了。 换新手机了，说来惭愧，第一次用当年最新款的iPhone，确实丝滑。 阅读 《股票大作手回忆录》 群里炒股的群友们多次聊过的书，因为不炒股，也不太懂书中写的那些做空手法。就觉得很厉害，毕竟赚了那么多钱，但也不知道厉害在哪。作为人物传记来看，确实很传奇。 《Web性能权威指南》 书有点老了，不过内容也不算太过时尤其是前面几章关于TCP/UDP/TLS的内容。作为一个不懂前端的后端，后面几张关于浏览器性能优化的内容收获比较多，当然前端技术变化更快，也许已经过时了，但对我来说也是扩展了视野。 一点想法 纸上得来终觉浅，绝知此事要躬行 ，这两天深得这句话的含义。又在折腾博客，打算采用hugo替换掉原来的jekyII，对比下来感觉hugo更简单，毕竟我完全不懂前端。而且对比评价，hugo因为是编译好的二进制，网页生成速度要快得多。&#xA;看了两篇文章和官方文档，觉得也太简单了。直接 hugo new site 生成，然后 hugo server 跑起来就可以了。&#xA;然而实际操作的时候，却花了我几个小时时间，首先是一个网络问题，虽然我已经开启了科学上网，但在执行的时候还是无法从twitter这个域名成功连接。看到错误的时候当然是考虑从网络方面去解决，来来回回折腾了好久也没解决。后来一想，这些报错页面都是theme中例子的文件，删掉不就好了。果然删掉无用的那些示例 markdown 就好了。&#xA;第二个问题则是部署以后 css 和 js 资源下载失败，导致页面无法正常显示。问题我倒一眼看出来了，虽然我不懂前端，但我也会 F12 进入debug模式查看。&#xA;后面发现是由于配置的baseURL，本应是https错写成http。&#xA;所以说，想要学会一门技能，必须先把手弄脏，实践才能出真知。&#xA;好了，现在我的blog可以运行起来了，以后要多多写文章，先从每周周记开始。&#xA;参考 官方 Quick Start Host on GitHub Pages </description>
    </item>
  </channel>
</rss>
