<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tcp on 广阔天地大有作为</title>
    <link>https://zhiqli.github.io/tags/tcp/</link>
    <description>Recent content in Tcp on 广阔天地大有作为</description>
    <generator>Hugo</generator>
    <language>zh</language>
    <copyright>© Copyright zhiqli</copyright>
    <lastBuildDate>Sat, 24 Mar 2018 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://zhiqli.github.io/tags/tcp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>一些TCP基础笔记</title>
      <link>https://zhiqli.github.io/2018/03/%E4%B8%80%E4%BA%9Btcp%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sat, 24 Mar 2018 00:00:00 +0000</pubDate>
      <guid>https://zhiqli.github.io/2018/03/%E4%B8%80%E4%BA%9Btcp%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;本文主要是看书看文章时做的笔记，记录一些TCP相关的基本概念。引用文章来自补充阅读，点击可到原文链接。&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;概念&#34;&gt;概念&lt;/h2&gt;&#xA;&lt;h3 id=&#34;mtumaximum-transmission-unit最大传输单元&#34;&gt;MTU：maximum transmission unit最大传输单元&lt;/h3&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;每种网络都不一样，以太网是1500。最小46字节。当数据块大于MTU时，将在发送端IP层进行分片，接收端IP层进行重组。IP分组在网络中传输中出现丢包时，由于IP层没有重传机制，TCP将重传整个报文段而不是丢失的IP分组&lt;/p&gt;&#xA;&lt;p&gt;PS: 以太网最小数据帧长度为，最小64字节，其中6字节目的地址 、字节6源地址、2字节类型、46字节数据、4字节校验和.&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h3 id=&#34;mssmaximum-segment-size最大分段大小&#34;&gt;MSS：maximum segment size最大分段大小&lt;/h3&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;MSS是TCP数据包每次能够传输的最大数据分段。为了达到最佳的传输效能TCP协议在建立连接的时候通常要协商双方的MSS值，这个值TCP协议在实现的时候往往用MTU值代替（需要减去IP数据包包头的大小20Bytes和TCP数据段的包头20Bytes）所以往往MSS为1460。通讯双方会根据双方提供的MSS值得最小值确定为这次连接的最大MSS值。&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h3 id=&#34;mslmaximum-segment-lifetime报文最大生存时间&#34;&gt;MSL：Maximum Segment Lifetime报文最大生存时间&lt;/h3&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;报文在网络上存在的最长时间，超过这个时间报文将被丢弃。在RFC793指出MSL为2分钟，实际应用中常用的是30秒（linux），1分钟和2分钟等。&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h3 id=&#34;ttltime-to-live生存时间&#34;&gt;TTL：Time To Live生存时间&lt;/h3&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;生存时间是由源主机设置初始值但不是存的具体时间，而是存储了一个ip数据报可以经过的最大路由数，每经过一个处理他的路由器此值就减1，当此值为0则数据报将被丢弃，同时发送ICMP报文通知源主机。&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h3 id=&#34;rttround-trip-time客户到服务器往返所花时间&#34;&gt;RTT：round-trip time客户到服务器往返所花时间&lt;/h3&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;RTT由三部分组成：链路的传播时间（propagation delay）、末端系统的处理时间、&#xA;路由器缓存中的排队和处理时间（queuing delay）。&#xA;其中，前两个部分的值对于一个TCP连接相对固定，路由器缓存中的排队和处理时间会随着整个网络拥塞程度&#xA;的变化而变化。所以RTT的变化在一定程度上反应了网络的拥塞程度。&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h3 id=&#34;rtoretransmission-timeout重传超时时间&#34;&gt;RTO：Retransmission TimeOut重传超时时间&lt;/h3&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;重传机制依赖于RTT（Round Trip Time）的测量，从而计算RTO（Retransmission Timeout）。&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h3 id=&#34;tsotcp-segment-offload&#34;&gt;TSO：TCP Segment Offload&lt;/h3&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;是一种利用网卡的处理能力，降低CPU发送数据包负载的技术。对于支持TSO的网卡，TCP协议栈在封包的时候会逐渐尝试增大MSS，网卡接收到TCP向下递交的数据后，按照MTU进行分片、复制TCP头且重新计算校验和，这样在网卡上完成了对大块数据的TCP分段，缓解了CPU的计算压力。&lt;/p&gt;&#xA;&lt;p&gt;查看是否开启TSO&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;sudo ethtool -k eth0&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;关闭和打开TSO&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;$ sudo ethtool -K eth0 tso off  // 关闭tso&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;$ sudo ethtool -K eth0 tso on  // 开启tso&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
